/*
 * This source file was generated by the Gradle 'init' task
 */
package com.github.cliffdurden.ignite.demo

import org.apache.ignite.Ignite
import org.apache.ignite.Ignition
import org.apache.ignite.configuration.IgniteConfiguration
import org.apache.ignite.lang.IgniteRunnable
import org.apache.ignite.resources.IgniteInstanceResource
import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi
import org.apache.ignite.spi.discovery.tcp.ipfinder.multicast.TcpDiscoveryMulticastIpFinder


/**
 * @see https://apacheignite.readme.io/docs/getting-started
 */
fun main() {
    // Preparing IgniteConfiguration using Java APIs
    val cfg = IgniteConfiguration()
    // The node will be started as a client node.
    cfg.isClientMode = true
    // Classes of custom Java logic will be transferred over the wire from this app.
    cfg.isPeerClassLoadingEnabled = true
    // Setting up an IP Finder to ensure the client can locate the servers.
    val ipFinder = TcpDiscoveryMulticastIpFinder()
    ipFinder.setAddresses(mutableListOf<String?>("127.0.0.1:47500..47509"))
    cfg.discoverySpi = TcpDiscoverySpi().setIpFinder(ipFinder)


    // Starting the node
    val ignite = Ignition.start(cfg)


    // Create an IgniteCache and put some values in it.
    val cache = ignite.getOrCreateCache<Int?, String?>("myCache")
    cache.put(1, "Hello")
    cache.put(2, "World!")

    println(">> Created the cache and add the values.")


    // Executing custom Java compute task on server nodes.
    ignite.compute(ignite.cluster().forServers()).broadcast(RemoteTask())

    println(">> Compute task is executed, check for output on the server nodes.")

    // Disconnect from the cluster.
    ignite.close()
}

/**
 * A compute tasks that prints out a node ID and some details about its OS and JRE.
 * Plus, the code shows how to access data stored in a cache from the compute task.
 */
private class RemoteTask : IgniteRunnable {
    @IgniteInstanceResource
    var ignite: Ignite? = null

    override fun run() {
        println(">> Executing the compute task")

        println(
            "   Node ID: " + ignite!!.cluster().localNode().id() + "\n" +
                    "   OS: " + System.getProperty("os.name") +
                    "   JRE: " + System.getProperty("java.runtime.name")
        )

        val cache = ignite!!.cache<Int?, String?>("myCache")

        println(">> " + cache.get(1) + " " + cache.get(2))
    }
}